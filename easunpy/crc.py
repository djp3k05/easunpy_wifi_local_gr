# crc.py full code
auchCRCHi = [
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1,
0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
0x81, 0x40
]

auchCRCLo = [
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1,
0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41,
0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0,
0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1, 0x80, 0x40,
0x01, 0xC1, 0x80, 0x40, 0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0,
0x81, 0x41, 0x01, 0xC1, 0x80, 0x40, 0x01, 0xC1, 0x80, 0x40,
0x00, 0xC0, 0x81, 0x41, 0x00, 0xC0, 0x81, 0x41, 0x01, 0xC1,
0x80, 0x40
]


def crc16_modbus(data: bytes) -> int:
    """
    Calculate Modbus CRC16 using the algorithm provided in C.
    :param data: Input data as bytes
    :return: CRC as an integer
    """
    ubCRCHi = 0xFF
    ubCRCLo = 0xFF

    for byte in data:
        index = ubCRCHi ^ byte
        ubCRCHi = ubCRCLo ^ auchCRCHi[index]
        ubCRCLo = auchCRCLo[index]

    # return (ubCRCHi << 8) | ubCRCLo  # Combine high and low bytes into a single value
    return (ubCRCLo << 8) | ubCRCHi  # Invertimos el orden para little-endian

def crc16_xmodem(data: bytes) -> int:
    crc = 0
    for byte in data:
        crc ^= (byte << 8)
        for _ in range(8):
            if (crc & 0x8000) != 0:
                crc = (crc << 1) ^ 0x1021
            else:
                crc = crc << 1
        crc &= 0xFFFF
    return crc

def adjust_crc_byte(b: int) -> int:
    if b in (0x0A, 0x0D, 0x28):
        return b + 1
    return b